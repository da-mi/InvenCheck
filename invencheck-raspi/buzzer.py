"""
Buzzer class definition
Passive buzzer connected to a Raspberry Pi using hardware PWM (pigpio)

Damiano Milani
2025
"""

import pigpio
import time

class Buzzer:
    NOTES = {
        'B0': 31, 'C1': 33, 'CS1': 35, 'D1': 37, 'DS1': 39, 'E1': 41, 'F1': 44, 'FS1': 46, 'G1': 49, 'GS1': 52,
        'A1': 55, 'AS1': 58, 'B1': 62, 'C2': 65, 'CS2': 69, 'D2': 73, 'DS2': 78, 'E2': 82, 'F2': 87, 'FS2': 93,
        'G2': 98, 'GS2': 104, 'A2': 110, 'AS2': 117, 'B2': 123, 'C3': 131, 'CS3': 139, 'D3': 147, 'DS3': 156,
        'E3': 165, 'F3': 175, 'FS3': 185, 'G3': 196, 'GS3': 208, 'A3': 220, 'AS3': 233, 'B3': 247, 'C4': 262,
        'CS4': 277, 'D4': 294, 'DS4': 311, 'E4': 330, 'F4': 349, 'FS4': 370, 'G4': 392, 'GS4': 415, 'A4': 440,
        'AS4': 466, 'B4': 494, 'C5': 523, 'CS5': 554, 'D5': 587, 'DS5': 622, 'E5': 659, 'F5': 698, 'FS5': 740,
        'G5': 784, 'GS5': 831, 'A5': 880, 'AS5': 932, 'B5': 988, 'C6': 1047, 'CS6': 1109, 'D6': 1175, 'DS6': 1245,
        'E6': 1319, 'F6': 1397, 'FS6': 1480, 'G6': 1568, 'GS6': 1661, 'A6': 1760, 'AS6': 1865, 'B6': 1976,
        'C7': 2093, 'CS7': 2217, 'D7': 2349, 'DS7': 2489, 'E7': 2637, 'F7': 2794, 'FS7': 2960, 'G7': 3136,
        'GS7': 3322, 'A7': 3520, 'AS7': 3729, 'B7': 3951, 'C8': 4186, 'D8': 4434, 'E8': 4698, 'F8': 4978, 
        'G8': 5274, 'A8': 5587, 'B8': 5919, 'C9': 6000,
        'REST': 0
    }

    def __init__(self, pin, default_freq=2000):
        self.pin = pin
        self.default_freq = default_freq
        self.pi = pigpio.pi()
        if not self.pi.connected:
            raise RuntimeError("Cannot connect to pigpio daemon. Make sure 'pigpiod' is running.")
        self.pi.set_mode(self.pin, pigpio.OUTPUT)

    def beep(self, frequency=None, duration=0.1):
        if frequency and frequency > 0:
            self.pi.hardware_PWM(self.pin, frequency, 500000)  # 50% duty cycle
            time.sleep(duration)
            self.pi.hardware_PWM(self.pin, 0, 0)  # Stop
        else:
            time.sleep(duration)

    def note(self, name, duration=0.1):
        freq = self.NOTES.get(name.upper(), 0)
        self.beep(freq, duration)

    def play_song(self, song, tempo=1.0, pause=0.05):
        for note, duration in song:
            actual_duration = duration * tempo
            if note.upper() == 'REST':
                time.sleep(actual_duration)
            else:
                self.note(note, actual_duration)
            time.sleep(pause * tempo)

    # Preset tones
    def read(self):
        self.play_song([('C7',0.05)])

    def online(self):
        self.play_song([('C7',0.05),('G7',0.05),('C8',0.1)])

    def checkin(self):
        self.play_song([('C8',0.05),('C8',0.05),('C8',0.1)])

    def checkout(self):
        self.play_song([('C7',0.1),('A6',0.1),('F6',0.2)])

    def error(self):
        self.play_song([('C3',0.2),('C3',0.2),('C3',0.2)])

    def sweep(self):
        for note in self.NOTES:
            self.note(note, 0.005)
            time.sleep(0.001)

    # Songs
    def mario(self):
        song = [
            ('E5', 0.1), ('E5', 0.1), ('REST', 0.1), ('E5', 0.1),
            ('REST', 0.1), ('C5', 0.1), ('E5', 0.1), ('REST', 0.1), ('G5', 0.3), ('REST', 0.3), ('G4', 0.3),
            ('REST', 0.2), ('C5', 0.1), ('G4', 0.1), ('REST', 0.1), ('E4', 0.1),
            ('A4', 0.1), ('B4', 0.1), ('AS4', 0.1), ('A4', 0.1),
            ('G4', 0.1), ('E5', 0.1), ('G5', 0.1), ('A5', 0.3),
            ('F5', 0.1), ('G5', 0.1), ('REST', 0.1), ('E5', 0.1),
            ('C5', 0.1), ('D5', 0.1), ('B4', 0.1), ('REST', 0.3),
        ]
        self.play_song(song)

    def star_wars(self):
        song = [
            ('AS4', 0.125), ('AS4', 0.125), ('AS4', 0.125),
            ('F5', 0.5), ('C6', 0.5),
            ('AS5', 0.125), ('A5', 0.125), ('G5', 0.125), ('F6', 0.5), ('C6', 0.25),
            ('AS5', 0.125), ('A5', 0.125), ('G5', 0.125), ('F6', 0.5), ('C6', 0.25),
            ('AS5', 0.125), ('A5', 0.125), ('AS5', 0.125), ('G5', 0.5), ('C5', 0.125), ('C5', 0.125), ('C5', 0.125),
            ('F5', 0.5), ('C6', 0.5),
            ('AS5', 0.125), ('A5', 0.125), ('G5', 0.125), ('F6', 0.5), ('C6', 0.25),
            ('AS5', 0.125), ('A5', 0.125), ('G5', 0.125), ('F6', 0.5), ('C6', 0.25),
            ('AS5', 0.125), ('A5', 0.125), ('AS5', 0.125), ('G5', 0.5), ('C5', 0.125), ('C5', 0.0625),
            ('D5', 0.25), ('D5', 0.125), ('AS5', 0.125), ('A5', 0.125), ('G5', 0.125), ('F5', 0.125),
            ('F5', 0.125), ('G5', 0.125), ('A5', 0.125), ('G5', 0.25), ('D5', 0.125), ('E5', 0.25), ('C5', 0.125), ('C5', 0.0625),
            ('D5', 0.25), ('D5', 0.125), ('AS5', 0.125), ('A5', 0.125), ('G5', 0.125), ('F5', 0.125),
            ('C6', 0.125), ('G5', 0.0625), ('G5', 0.5), ('REST', 0.125), ('C5', 0.125),
            ('D5', 0.25), ('D5', 0.125), ('AS5', 0.125), ('A5', 0.125), ('G5', 0.125), ('F5', 0.125),
            ('F5', 0.125), ('G5', 0.125), ('A5', 0.125), ('G5', 0.25), ('D5', 0.125), ('E5', 0.25), ('C6', 0.125), ('C6', 0.0625),
            ('F6', 0.25), ('DS6', 0.125), ('CS6', 0.25), ('C6', 0.125), ('AS5', 0.25), ('GS5', 0.125), ('G5', 0.25), ('F5', 0.125),
            ('C6', 1.0)
        ]
        self.play_song(song)

    def imperial(self):
        sw = [
            ('A3', 0.5), ('A3', 0.5), ('A3', 0.5),
            ('F3', 0.35), ('C4', 0.15), ('A3', 0.5),
            ('F3', 0.35), ('C4', 0.15), ('A3', 0.8),
            ('E4', 0.5), ('E4', 0.5), ('E4', 0.5),
            ('F4', 0.35), ('C4', 0.15), ('GS3', 0.5),
            ('F3', 0.35), ('C4', 0.15), ('A3', 0.8),
        ]
        self.play_song(sw)

    def game_of_thrones(self):
        song = [
            ('G4', 0.25), ('C4', 0.25), ('DS4', 0.0625), ('F4', 0.0625), ('G4', 0.25), ('C4', 0.25), ('DS4', 0.0625), ('F4', 0.0625),
            ('D4', 1.0), ('F4', 0.25), ('AS3', 0.25), ('DS4', 0.0625), ('D4', 0.0625), ('F4', 0.25), ('AS3', 0.25),
            ('DS4', 0.0625), ('D4', 0.0625), ('C4', 1.0), ('G4', 0.25), ('C4', 0.25), ('DS4', 0.0625), ('F4', 0.0625),
            ('G4', 0.25), ('C4', 0.25), ('DS4', 0.0625), ('F4', 0.0625), ('D4', 1.0), ('F4', 0.25), ('AS3', 0.25),
            ('DS4', 0.0625), ('D4', 0.0625), ('F4', 0.25), ('AS3', 0.25), ('DS4', 0.0625), ('D4', 0.0625), ('C4', 1.0),
            ('G4', 0.25), ('C4', 0.25), ('DS4', 0.0625), ('F4', 0.0625), ('G4', 0.25), ('C4', 0.25), ('DS4', 0.0625), ('F4', 0.0625),
            ('D4', 0.5), ('F4', 0.25), ('AS3', 0.25), ('D4', 0.125), ('DS4', 0.125), ('D4', 0.125), ('AS3', 0.125), ('C4', 1.0)
        ]
        self.play_song(song,tempo=1.2)

    def take_on_me(self):
        song = [('FS5', 0.125), ('FS5', 0.125), ('D5', 0.125), ('B4', 0.25), ('B4', 0.25), ('E5', 0.25),
                ('E5', 0.25), ('E5', 0.125), ('GS5', 0.125), ('GS5', 0.125), ('A5', 0.125), ('B5', 0.125),
                ('A5', 0.125), ('A5', 0.125), ('A5', 0.125), ('E5', 0.25), ('D5', 0.25), ('FS5', 0.25),
                ('FS5', 0.25), ('FS5', 0.125), ('E5', 0.125), ('E5', 0.125), ('FS5', 0.125), ('E5', 0.125)
                ]
        self.play_song(song)

    def star_trek(self):
        song = [
            ('D4', 0.083333), ('G4', 0.0625), ('C5', 0.375),
            ('B4', 0.125), ('G4', 0.041666), ('E4', 0.041666), ('A4', 0.041666), ('D5', 0.5)
        ]
        self.play_song(song,tempo=1.5)    

    def harry_potter(self):
        song = [('D4', 0.25),
                ('G4', 0.375), ('AS4', 0.125), ('A4', 0.25),
                ('G4', 0.5), ('D5', 0.25),
                ('C5', 0.6666), 
                ('A4', 0.6666),
                ('G4', 0.375), ('AS4', 0.125), ('A4', 0.25),
                ('F4', 0.5), ('GS4', 0.25),
                ('D4', 0.6666), 
                ('REST', 0.5),
                ('D4', 0.25),
                ('G4', 0.375), ('AS4', 0.125), ('A4', 0.25),
                ('G4', 0.5), ('D5', 0.25),
                ('F5', 0.5), ('E5', 0.25),
                ('DS5', 0.5), ('B4', 0.25),
                ('DS5', 0.375), ('D5', 0.125), ('CS5', 0.25),
                ('CS4', 0.5), ('B4', 0.25),
                ('G4', 0.6666),
                ('REST', 0.5),
                ('AS4', 0.25),     
                ('D5', 0.5), ('AS4', 0.25),
                ('D5', 0.5), ('AS4', 0.25),
                ('DS5', 0.5), ('D5', 0.25),
                ('CS5', 0.5), ('A4', 0.25),
                ('AS4', 0.375), ('D5', 0.125), ('CS5', 0.25),
                ('CS4', 0.5), ('D4', 0.25),
                ('D5', 0.6666),
                ('REST', 0.25), ('AS4', 0.25),
                ('D5', 0.5), ('AS4', 0.25),
                ('D5', 0.5), ('AS4', 0.25),
                ('F5', 0.5), ('E5', 0.25),
                ('DS5', 0.5), ('B4', 0.25),
                ('DS5', 0.375), ('D5', 0.125), ('CS5', 0.25),
                ('CS4', 0.5), ('AS4', 0.25),
                ('G4', 0.6666)]
        self.play_song(song) 
        
    def ode_to_joy(self):
        song = [('A4', 0.25), ('A4', 0.25), ('AS4', 0.25), ('C5', 0.25),
                ('C5', 0.25), ('AS4', 0.25), ('A4', 0.25), ('G4', 0.25),
                ('F4', 0.25), ('F4', 0.25), ('G4', 0.25), ('A4', 0.25),
                ('A4', 0.375), ('G4', 0.125), ('G4', 0.5)]
        
        self.play_song(song) 


    def close(self):
        self.pi.hardware_PWM(self.pin, 0, 0)
        self.pi.stop()


if __name__ == "__main__":
    buzzer = Buzzer(pin=13)  # GPIO18 supports hardware PWM0
    buzzer.harry_potter()
    buzzer.close()

